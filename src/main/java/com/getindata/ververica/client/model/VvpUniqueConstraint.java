/*
 * Ververica Platform API
 * The Ververica Platform APIs, excluding Application Manager.
 *
 * OpenAPI spec version: 2.7.0
 * Contact: platform@ververica.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.getindata.ververica.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * VvpUniqueConstraint
 */

public class VvpUniqueConstraint {
  @JsonProperty("column")
  private List<String> column = null;

  @JsonProperty("enforced")
  private Boolean enforced = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    CONSTRAINT_TYPE_INVALID("CONSTRAINT_TYPE_INVALID"),
    
    CONSTRAINT_TYPE_PRIMARY_KEY("CONSTRAINT_TYPE_PRIMARY_KEY"),
    
    CONSTRAINT_TYPE_UNIQUE("CONSTRAINT_TYPE_UNIQUE"),
    
    UNRECOGNIZED("UNRECOGNIZED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  public VvpUniqueConstraint column(List<String> column) {
    this.column = column;
    return this;
  }

  public VvpUniqueConstraint addColumnItem(String columnItem) {
    if (this.column == null) {
      this.column = new ArrayList<String>();
    }
    this.column.add(columnItem);
    return this;
  }

   /**
   * Get column
   * @return column
  **/
  @ApiModelProperty(value = "")
  public List<String> getColumn() {
    return column;
  }

  public void setColumn(List<String> column) {
    this.column = column;
  }

  public VvpUniqueConstraint enforced(Boolean enforced) {
    this.enforced = enforced;
    return this;
  }

   /**
   * Get enforced
   * @return enforced
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnforced() {
    return enforced;
  }

  public void setEnforced(Boolean enforced) {
    this.enforced = enforced;
  }

  public VvpUniqueConstraint name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public VvpUniqueConstraint type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VvpUniqueConstraint vvpUniqueConstraint = (VvpUniqueConstraint) o;
    return Objects.equals(this.column, vvpUniqueConstraint.column) &&
        Objects.equals(this.enforced, vvpUniqueConstraint.enforced) &&
        Objects.equals(this.name, vvpUniqueConstraint.name) &&
        Objects.equals(this.type, vvpUniqueConstraint.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, enforced, name, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VvpUniqueConstraint {\n");
    
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    enforced: ").append(toIndentedString(enforced)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

